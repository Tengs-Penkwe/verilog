
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ledwalker.v
Parsing formal SystemVerilog input from `ledwalker.v' to AST representation.
Generating RTLIL representation for module `\ledwalker'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \ledwalker

2.1.2. Analyzing design hierarchy..
Top module:  \ledwalker
Removed 0 unused modules.
Module ledwalker directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$ledwalker.v:75$11 in module ledwalker.
Marked 1 switch rules as full_case in process $proc$ledwalker.v:42$6 in module ledwalker.
Marked 1 switch rules as full_case in process $proc$ledwalker.v:36$3 in module ledwalker.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\ledwalker.$proc$ledwalker.v:35$16'.
  Set init value: \led_index = 4'0000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ledwalker.$proc$ledwalker.v:35$16'.
     1/1: $1\led_index[3:0]
Creating decoders for process `\ledwalker.$proc$ledwalker.v:75$11'.
     1/4: $1\f_valid_output[0:0]
     2/4: $0$formal$ledwalker.v:94$2_EN[0:0]$13
     3/4: $0$formal$ledwalker.v:94$2_CHECK[0:0]$12
     4/4: $0\f_valid_output[0:0]
Creating decoders for process `\ledwalker.$proc$ledwalker.v:68$7'.
     1/2: $0$formal$ledwalker.v:69$1_EN[0:0]$9
     2/2: $0$formal$ledwalker.v:69$1_CHECK[0:0]$8
Creating decoders for process `\ledwalker.$proc$ledwalker.v:42$6'.
     1/1: $0\o_led[7:0]
Creating decoders for process `\ledwalker.$proc$ledwalker.v:36$3'.
     1/1: $0\led_index[3:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ledwalker.$formal$ledwalker.v:94$2_CHECK' from process `\ledwalker.$proc$ledwalker.v:75$11'.
No latch inferred for signal `\ledwalker.$formal$ledwalker.v:94$2_EN' from process `\ledwalker.$proc$ledwalker.v:75$11'.
No latch inferred for signal `\ledwalker.\f_valid_output' from process `\ledwalker.$proc$ledwalker.v:75$11'.
No latch inferred for signal `\ledwalker.$formal$ledwalker.v:69$1_CHECK' from process `\ledwalker.$proc$ledwalker.v:68$7'.
No latch inferred for signal `\ledwalker.$formal$ledwalker.v:69$1_EN' from process `\ledwalker.$proc$ledwalker.v:68$7'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ledwalker.\o_led' using process `\ledwalker.$proc$ledwalker.v:42$6'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\ledwalker.\led_index' using process `\ledwalker.$proc$ledwalker.v:36$3'.
  created $dff cell `$procdff$46' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ledwalker.$proc$ledwalker.v:35$16'.
Found and cleaned up 1 empty switch in `\ledwalker.$proc$ledwalker.v:75$11'.
Removing empty process `ledwalker.$proc$ledwalker.v:75$11'.
Removing empty process `ledwalker.$proc$ledwalker.v:68$7'.
Found and cleaned up 1 empty switch in `\ledwalker.$proc$ledwalker.v:42$6'.
Removing empty process `ledwalker.$proc$ledwalker.v:42$6'.
Found and cleaned up 1 empty switch in `\ledwalker.$proc$ledwalker.v:36$3'.
Removing empty process `ledwalker.$proc$ledwalker.v:36$3'.
Cleaned up 3 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module ledwalker..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ledwalker'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ledwalker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ledwalker.
    New ctrl vector for $pmux cell $procmux$18: $auto$opt_reduce.cc:132:opt_mux$48
    New ctrl vector for $pmux cell $procmux$28: { $procmux$35_CMP $auto$opt_reduce.cc:132:opt_mux$60 $auto$opt_reduce.cc:132:opt_mux$58 $auto$opt_reduce.cc:132:opt_mux$56 $auto$opt_reduce.cc:132:opt_mux$54 $auto$opt_reduce.cc:132:opt_mux$52 $auto$opt_reduce.cc:132:opt_mux$50 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$47: { $procmux$19_CMP $procmux$21_CMP $procmux$20_CMP $procmux$22_CMP $procmux$23_CMP $procmux$24_CMP $procmux$25_CMP $procmux$26_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$49: { $procmux$29_CMP $procmux$41_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$51: { $procmux$30_CMP $procmux$40_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$53: { $procmux$31_CMP $procmux$39_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$55: { $procmux$32_CMP $procmux$38_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$57: { $procmux$33_CMP $procmux$37_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$59: { $procmux$34_CMP $procmux$36_CMP }
  Optimizing cells in module \ledwalker.
Performed a total of 9 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ledwalker'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ledwalker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ledwalker.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ledwalker'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 8) from port B of cell ledwalker.$procmux$20_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell ledwalker.$procmux$21_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell ledwalker.$procmux$22_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell ledwalker.$procmux$23_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell ledwalker.$procmux$24_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell ledwalker.$procmux$25_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell ledwalker.$procmux$26_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ledwalker.$procmux$35_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ledwalker.$procmux$36_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ledwalker.$procmux$37_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ledwalker.$procmux$38_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ledwalker.$procmux$39_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ledwalker.$procmux$40_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell ledwalker.$procmux$41_CMP0 ($eq).

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ledwalker'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== ledwalker ===

   Number of wires:                 37
   Number of wire bits:             60
   Number of public wires:           4
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $add                            1
     $assert                         2
     $dff                            2
     $eq                            21
     $gt                             1
     $le                             1
     $mux                            2
     $pmux                           1
     $reduce_or                      7

2.13. Executing CHECK pass (checking for obvious problems).
checking module ledwalker..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ledwalker.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ledwalker'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ledwalker..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module ledwalker..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \ledwalker

9.2. Analyzing design hierarchy..
Top module:  \ledwalker
Removed 0 unused modules.
Module ledwalker directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 8afe8e0496, CPU: user 0.02s system 0.00s
Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)
Time spent: 26% 7x opt_clean (0 sec), 20% 6x opt_expr (0 sec), ...
